/**
   * @license
   * author: chrissong
   * multi-part-upload.js v1.0.1
   * Released under the ISC license.
   */
"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var e=t(require("axios"));var r=function(t){var e={exports:{}};return t(e,e.exports),e.exports}((function(t,e){t.exports=function(t){var e=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function r(t,e){var r=t[0],n=t[1],o=t[2],a=t[3];n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&o|~n&a)+e[0]-680876936|0)<<7|r>>>25)+n|0)&n|~r&o)+e[1]-389564586|0)<<12|a>>>20)+r|0)&r|~a&n)+e[2]+606105819|0)<<17|o>>>15)+a|0)&a|~o&r)+e[3]-1044525330|0)<<22|n>>>10)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&o|~n&a)+e[4]-176418897|0)<<7|r>>>25)+n|0)&n|~r&o)+e[5]+1200080426|0)<<12|a>>>20)+r|0)&r|~a&n)+e[6]-1473231341|0)<<17|o>>>15)+a|0)&a|~o&r)+e[7]-45705983|0)<<22|n>>>10)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&o|~n&a)+e[8]+1770035416|0)<<7|r>>>25)+n|0)&n|~r&o)+e[9]-1958414417|0)<<12|a>>>20)+r|0)&r|~a&n)+e[10]-42063|0)<<17|o>>>15)+a|0)&a|~o&r)+e[11]-1990404162|0)<<22|n>>>10)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&o|~n&a)+e[12]+1804603682|0)<<7|r>>>25)+n|0)&n|~r&o)+e[13]-40341101|0)<<12|a>>>20)+r|0)&r|~a&n)+e[14]-1502002290|0)<<17|o>>>15)+a|0)&a|~o&r)+e[15]+1236535329|0)<<22|n>>>10)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&a|o&~a)+e[1]-165796510|0)<<5|r>>>27)+n|0)&o|n&~o)+e[6]-1069501632|0)<<9|a>>>23)+r|0)&n|r&~n)+e[11]+643717713|0)<<14|o>>>18)+a|0)&r|a&~r)+e[0]-373897302|0)<<20|n>>>12)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&a|o&~a)+e[5]-701558691|0)<<5|r>>>27)+n|0)&o|n&~o)+e[10]+38016083|0)<<9|a>>>23)+r|0)&n|r&~n)+e[15]-660478335|0)<<14|o>>>18)+a|0)&r|a&~r)+e[4]-405537848|0)<<20|n>>>12)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&a|o&~a)+e[9]+568446438|0)<<5|r>>>27)+n|0)&o|n&~o)+e[14]-1019803690|0)<<9|a>>>23)+r|0)&n|r&~n)+e[3]-187363961|0)<<14|o>>>18)+a|0)&r|a&~r)+e[8]+1163531501|0)<<20|n>>>12)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n&a|o&~a)+e[13]-1444681467|0)<<5|r>>>27)+n|0)&o|n&~o)+e[2]-51403784|0)<<9|a>>>23)+r|0)&n|r&~n)+e[7]+1735328473|0)<<14|o>>>18)+a|0)&r|a&~r)+e[12]-1926607734|0)<<20|n>>>12)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n^o^a)+e[5]-378558|0)<<4|r>>>28)+n|0)^n^o)+e[8]-2022574463|0)<<11|a>>>21)+r|0)^r^n)+e[11]+1839030562|0)<<16|o>>>16)+a|0)^a^r)+e[14]-35309556|0)<<23|n>>>9)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n^o^a)+e[1]-1530992060|0)<<4|r>>>28)+n|0)^n^o)+e[4]+1272893353|0)<<11|a>>>21)+r|0)^r^n)+e[7]-155497632|0)<<16|o>>>16)+a|0)^a^r)+e[10]-1094730640|0)<<23|n>>>9)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n^o^a)+e[13]+681279174|0)<<4|r>>>28)+n|0)^n^o)+e[0]-358537222|0)<<11|a>>>21)+r|0)^r^n)+e[3]-722521979|0)<<16|o>>>16)+a|0)^a^r)+e[6]+76029189|0)<<23|n>>>9)+o|0,n=((n+=((o=((o+=((a=((a+=((r=((r+=(n^o^a)+e[9]-640364487|0)<<4|r>>>28)+n|0)^n^o)+e[12]-421815835|0)<<11|a>>>21)+r|0)^r^n)+e[15]+530742520|0)<<16|o>>>16)+a|0)^a^r)+e[2]-995338651|0)<<23|n>>>9)+o|0,n=((n+=((a=((a+=(n^((r=((r+=(o^(n|~a))+e[0]-198630844|0)<<6|r>>>26)+n|0)|~o))+e[7]+1126891415|0)<<10|a>>>22)+r|0)^((o=((o+=(r^(a|~n))+e[14]-1416354905|0)<<15|o>>>17)+a|0)|~r))+e[5]-57434055|0)<<21|n>>>11)+o|0,n=((n+=((a=((a+=(n^((r=((r+=(o^(n|~a))+e[12]+1700485571|0)<<6|r>>>26)+n|0)|~o))+e[3]-1894986606|0)<<10|a>>>22)+r|0)^((o=((o+=(r^(a|~n))+e[10]-1051523|0)<<15|o>>>17)+a|0)|~r))+e[1]-2054922799|0)<<21|n>>>11)+o|0,n=((n+=((a=((a+=(n^((r=((r+=(o^(n|~a))+e[8]+1873313359|0)<<6|r>>>26)+n|0)|~o))+e[15]-30611744|0)<<10|a>>>22)+r|0)^((o=((o+=(r^(a|~n))+e[6]-1560198380|0)<<15|o>>>17)+a|0)|~r))+e[13]+1309151649|0)<<21|n>>>11)+o|0,n=((n+=((a=((a+=(n^((r=((r+=(o^(n|~a))+e[4]-145523070|0)<<6|r>>>26)+n|0)|~o))+e[11]-1120210379|0)<<10|a>>>22)+r|0)^((o=((o+=(r^(a|~n))+e[2]+718787259|0)<<15|o>>>17)+a|0)|~r))+e[9]-343485551|0)<<21|n>>>11)+o|0,t[0]=r+t[0]|0,t[1]=n+t[1]|0,t[2]=o+t[2]|0,t[3]=a+t[3]|0}function n(t){var e,r=[];for(e=0;e<64;e+=4)r[e>>2]=t.charCodeAt(e)+(t.charCodeAt(e+1)<<8)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+3)<<24);return r}function o(t){var e,r=[];for(e=0;e<64;e+=4)r[e>>2]=t[e]+(t[e+1]<<8)+(t[e+2]<<16)+(t[e+3]<<24);return r}function a(t){var e,o,a,s,f,i,h=t.length,u=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=h;e+=64)r(u,n(t.substring(e-64,e)));for(o=(t=t.substring(e-64)).length,a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],e=0;e<o;e+=1)a[e>>2]|=t.charCodeAt(e)<<(e%4<<3);if(a[e>>2]|=128<<(e%4<<3),e>55)for(r(u,a),e=0;e<16;e+=1)a[e]=0;return s=(s=8*h).toString(16).match(/(.*?)(.{0,8})$/),f=parseInt(s[2],16),i=parseInt(s[1],16)||0,a[14]=f,a[15]=i,r(u,a),u}function s(t){var e,n,a,s,f,i,h=t.length,u=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=h;e+=64)r(u,o(t.subarray(e-64,e)));for(n=(t=e-64<h?t.subarray(e-64):new Uint8Array(0)).length,a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],e=0;e<n;e+=1)a[e>>2]|=t[e]<<(e%4<<3);if(a[e>>2]|=128<<(e%4<<3),e>55)for(r(u,a),e=0;e<16;e+=1)a[e]=0;return s=(s=8*h).toString(16).match(/(.*?)(.{0,8})$/),f=parseInt(s[2],16),i=parseInt(s[1],16)||0,a[14]=f,a[15]=i,r(u,a),u}function f(t){var r,n="";for(r=0;r<4;r+=1)n+=e[t>>8*r+4&15]+e[t>>8*r&15];return n}function i(t){var e;for(e=0;e<t.length;e+=1)t[e]=f(t[e]);return t.join("")}function h(t){return/[\u0080-\uFFFF]/.test(t)&&(t=unescape(encodeURIComponent(t))),t}function u(t,e){var r,n=t.length,o=new ArrayBuffer(n),a=new Uint8Array(o);for(r=0;r<n;r+=1)a[r]=t.charCodeAt(r);return e?a:o}function c(t){return String.fromCharCode.apply(null,new Uint8Array(t))}function p(t,e,r){var n=new Uint8Array(t.byteLength+e.byteLength);return n.set(new Uint8Array(t)),n.set(new Uint8Array(e),t.byteLength),r?n:n.buffer}function l(t){var e,r=[],n=t.length;for(e=0;e<n-1;e+=2)r.push(parseInt(t.substr(e,2),16));return String.fromCharCode.apply(String,r)}function d(){this.reset()}return i(a("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function e(t,e){return(t=0|t||0)<0?Math.max(t+e,0):Math.min(t,e)}ArrayBuffer.prototype.slice=function(r,n){var o,a,s,f,i=this.byteLength,h=e(r,i),u=i;return n!==t&&(u=e(n,i)),h>u?new ArrayBuffer(0):(o=u-h,a=new ArrayBuffer(o),s=new Uint8Array(a),f=new Uint8Array(this,h,o),s.set(f),a)}}(),d.prototype.append=function(t){return this.appendBinary(h(t)),this},d.prototype.appendBinary=function(t){this._buff+=t,this._length+=t.length;var e,o=this._buff.length;for(e=64;e<=o;e+=64)r(this._hash,n(this._buff.substring(e-64,e)));return this._buff=this._buff.substring(e-64),this},d.prototype.end=function(t){var e,r,n=this._buff,o=n.length,a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<o;e+=1)a[e>>2]|=n.charCodeAt(e)<<(e%4<<3);return this._finish(a,o),r=i(this._hash),t&&(r=l(r)),this.reset(),r},d.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},d.prototype.setState=function(t){return this._buff=t.buff,this._length=t.length,this._hash=t.hash,this},d.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},d.prototype._finish=function(t,e){var n,o,a,s=e;if(t[s>>2]|=128<<(s%4<<3),s>55)for(r(this._hash,t),s=0;s<16;s+=1)t[s]=0;n=(n=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),o=parseInt(n[2],16),a=parseInt(n[1],16)||0,t[14]=o,t[15]=a,r(this._hash,t)},d.hash=function(t,e){return d.hashBinary(h(t),e)},d.hashBinary=function(t,e){var r=i(a(t));return e?l(r):r},d.ArrayBuffer=function(){this.reset()},d.ArrayBuffer.prototype.append=function(t){var e,n=p(this._buff.buffer,t,!0),a=n.length;for(this._length+=t.byteLength,e=64;e<=a;e+=64)r(this._hash,o(n.subarray(e-64,e)));return this._buff=e-64<a?new Uint8Array(n.buffer.slice(e-64)):new Uint8Array(0),this},d.ArrayBuffer.prototype.end=function(t){var e,r,n=this._buff,o=n.length,a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<o;e+=1)a[e>>2]|=n[e]<<(e%4<<3);return this._finish(a,o),r=i(this._hash),t&&(r=l(r)),this.reset(),r},d.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},d.ArrayBuffer.prototype.getState=function(){var t=d.prototype.getState.call(this);return t.buff=c(t.buff),t},d.ArrayBuffer.prototype.setState=function(t){return t.buff=u(t.buff,!0),d.prototype.setState.call(this,t)},d.ArrayBuffer.prototype.destroy=d.prototype.destroy,d.ArrayBuffer.prototype._finish=d.prototype._finish,d.ArrayBuffer.hash=function(t,e){var r=i(s(new Uint8Array(t)));return e?l(r):r},d}()}));const n=t=>Object.prototype.toString.call(t).slice(8,-1).toLowerCase(),o=t=>"number"===n(t),a=File.prototype.slice||File.prototype.mozSlice||File.prototype.webkitSlice,s=new Map,f=(t,e)=>new Promise(((n,o)=>{const s=t.size,f=Math.ceil(s/e);let i=0;const h=[],u=new r.ArrayBuffer,c=new FileReader;function p(){const r=i*e,n=r+e>=s?s:r+e,o=a.call(t,r,n);c.readAsArrayBuffer(o),h.push({buffer:o,start:r,end:n,size:n-r})}c.onload=e=>{if(u.append(e.target.result),i+=1,i<f)p();else{const e=u.end(),o=new r;o.append(e),o.append(t.name);const a=o.end();n({fileSize:s,hash:a,chunkBufferArray:h})}},c.onerror=()=>{o(new Error("文件读取失败！"))},p()}));module.exports=async({chunkSize:t=!1,parallel:r=!1,action:a,data:i,file:h,filename:u,headers:c,onError:p,onProgress:l,onSuccess:d,withCredentials:y})=>{const b=e.default.CancelToken.source();if(s.set(h.uid,b),t&&o(t)&&Number(t)>0){const[n,s]=await(g=f(h,Number(t)),g.then((t=>[null,t])).catch((t=>[t,null])));if(n)return p&&p(n,h);const{hash:A,fileSize:_,chunkBufferArray:w}=s;if(r&&o(r)&&Number(r)>0){const t=[],n=new Array(w.length).fill(0);for(let r=0;r<w.length;r++){const o=new FormData;if("function"==typeof i){const t=i(h,{chunkBuffer:w[r].buffer,chunkStart:w[r].start,chunkEnd:w[r].end,chunkSize:w[r].size,chunkCount:w.length,chunkIndex:r,fileHash:A});Object.keys(t).forEach((e=>{o.append(e,t[e])}))}else"object"==typeof i&&Object.keys(i).forEach((t=>{o.append(t,i[t])}));o.append(u,new Blob([w[r].buffer],{type:"application/octet-stream"})),t.push((()=>e.default.post(a,o,{cancelToken:b.token,withCredentials:y,headers:c,onUploadProgress:({loaded:t,...e})=>{n[r]=t;const o=n.reduce(((t,e)=>t+e),0);l&&l({percent:Math.round(o/_*100).toFixed(2),total:_,loaded:o,chunkIndex:r,...e},h)}})))}((t,e=1)=>new Promise(((r,n)=>{const o=[];!function a(s){const f=t.slice(s,s+e);s+=e,f.length?Promise.all(f.map((t=>t()))).then((t=>{o.push(...t),a(s)})).catch((t=>n(t))):r(o)}(0)})))(t,Number(r>6?6:r)).then((t=>(d&&d(t.data,h),t))).catch((t=>{p&&p(t,h)}))}else w.reduce(((t,r,n)=>t.then((t=>{const o=new FormData;if("function"==typeof i){const e=i(h,{chunkBuffer:r.buffer,chunkStart:r.start,chunkEnd:r.end,chunkSize:r.size,chunkCount:w.length,chunkIndex:n,fileHash:A},t);Object.keys(e).forEach((t=>{o.append(t,e[t])}))}else"object"==typeof i&&Object.keys(i).forEach((t=>{o.append(t,i[t])}));return o.append(u,new Blob([r.buffer],{type:"application/octet-stream"})),e.default.post(a,o,{cancelToken:b.token,withCredentials:y,headers:c,onUploadProgress:({loaded:t,...e})=>{const r=w[n].start+t;l&&l({percent:Math.round(r/_*100).toFixed(2),total:_,loaded:r,chunkIndex:n,...e},h)}})}))),Promise.resolve(null)).then((t=>(d&&d(t.data,h),t))).catch((t=>{p&&p(t,h)}))}else{const t=new FormData;if("function"==typeof i){const e=i(h);Object.keys(e).forEach((r=>{t.append(r,e[r])}))}else"object"==typeof i&&Object.keys(i).forEach((e=>{t.append(e,i[e])}));t.append(u,h),e.default.post(a,t,{cancelToken:b.token,withCredentials:y,headers:c,onUploadProgress:({total:t,loaded:e,...r})=>{l&&l({percent:Math.round(e/t*100).toFixed(2),total:t,loaded:e,...r},h)}}).then((({data:t})=>{d&&d(t,h)})).catch((t=>{p&&p(t,h)}))}var g;return t=>{if(void 0===t)for(const[t,e]of s)e.cancel(),s.delete(t);else if("string"===n(t)&&"string"==typeof t)s.get(t)&&(s.get(t).cancel(),s.delete(t));else if((t=>Array.isArray(t))(t))for(const e of t)s.get(e)&&(s.get(e).cancel(),s.delete(e))}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
